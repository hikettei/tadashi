#+startup: beamer
#+latex_header: \usepackage{tikz}
#+latex_header: \usetikzlibrary{graphs,quotes,graphdrawing,arrows.meta}
#+latex_compiler: lualatex
#+latex_header: \usegdlibrary{trees}
#+latex_header: \tikzset{trafo/.style={line width=6pt, arrows = {-Latex[length=0pt 3 0]}}}
#+latex_header: \tikzgraphsset{every graph/.style={grow down, tree layout, nodes={rounded corners, rectangle, draw}}}
#+latex_header: \def\scheduletreecolor{purple}
#+latex_header: \def\fromschedulecolor{teal}
#+latex_header: \def\markcolor{red}
#+latex_header: \def\aftermarkcolor{magenta}
#+latex_header: \def\atdomaincolor{blue}
#+latex_header: \def\printforcolor{orange}
#+latex_header: \def\printusercolor{cyan}

* Mark subtree
#+begin_export latex
\begin{tikzpicture}
  \scoped[\scheduletreecolor]
  \graph{
    "{band\_node}" -- {
      "",
      band/"{band\_node}" -- { "", "", "" }
    }
  };
  \draw[\markcolor, dashed, thick] (band) +(-1.5cm,-0.8cm) arc (180:0:1.5cm);

  \scoped[\scheduletreecolor, xshift=6cm]
  \graph{
    "{band\_node}" -- {
      "",
      "{mark:{"parallel"}}"[\markcolor] -- {
        "{{band\_node}}" [>\markcolor] -- { "", "", "" }
      }
    }
  };
  \path (3,1) node{Generate (edit) yaml file};
  \draw[\markcolor, trafo] (3, -1) -- +(1, 0);

\end{tikzpicture}
#+end_export

* Generating the AST

#+begin_export latex
\begin{tikzpicture}
  \scoped[\scheduletreecolor]
  \graph{
    "{band\_node}" -- {
      "",
      "mark:{"parallel"}"[\markcolor] -- {
        "{{band\_node}}" [>\markcolor] -- { "", "", "" }
      }
    }
  };
  \path (3,1) node[\fromschedulecolor]{isl\_ast\_build\_node\_from\_schedule(build, schedule)};
  \draw[\fromschedulecolor, trafo] (3, -1.5) -- +(1, 0);
  \scoped[xshift=6cm]
  \graph{
    "{{for\_node}}" -- {
      "",
      "{comment:{"parallel"}}"[\markcolor] -- {
        "{for\_node}" [>\markcolor] -- { "", "", "" }
      }
    }
  };
\end{tikzpicture}
#+end_export


* Pre\-processing the AST

#+begin_export latex
\begin{tikzpicture}
  \graph{
    "{for\_node}" -- {
      "",
      "{mark:{"parallel"}}"[\markcolor] -- {
        "{{ for\_node }}" [>\markcolor] -- { "$S_0[i, j]$"[blue] }
      }
    }
  };

  \path (3,1.5) node[\aftermarkcolor]{isl\_ast\_build\_set\_at\_each\_domain(build, at\_domain, id2stmt)}
  (3, 1) node[\atdomaincolor]{isl\_ast\_build\_set\_after\_each\_mark(build, after\_mark, NULL)};
  \draw[\aftermarkcolor, trafo] (3, -1.5) -- +(1, 0);
  \draw[\atdomaincolor, trafo] (3, -2.5) -- +(1, 0);

  \scoped[xshift=5.5cm, yshift=-0.5cm]
  \graph{
    "{for\_node}" -- {
      "",
      "{for\_node} + annot(``parallel'')"[\aftermarkcolor] [>\markcolor] -- { "$S_0[i,j]$ + annot(\texttt{A[i][j]+=..})"[\atdomaincolor] }
    }
  };
\end{tikzpicture}
#+end_export


* Printing the AST

#+begin_export latex
\begin{tikzpicture}
  \graph{
    "{for\_node}"[\printforcolor] -- {
      "",
      "{for\_node} + annot(``parallel'')"[\printforcolor] -- { "$S_0[i,j]$ + annot(\texttt{A[i][j]+=..})"[\printusercolor] }
    }
  };

  \path (3,1.5) node[\printforcolor]{isl\_ast\_print\_options\_set\_print\_for(print\_options, print\_for, NULL)}
  (3, 1) node[\printusercolor]{isl\_ast\_print\_options\_set\_print\_user(print\_options, print\_user, id2stmt)};
  \draw [\printforcolor, trafo] (3, 0) -- +(1, 0);
  \draw [\printforcolor, trafo] (4, -1) -- +(1, 0);
  \draw [\printusercolor, trafo] (4.5, -2) -- +(1, 0);
  \path[align=left, font=\ttfamily]
  node[\printforcolor] at (6.5, 0) {for(i=0, i < N, i++)\{}
  node[\printforcolor] at (7, -1) {\#pragma omp parallel\\for(j=0, j < M, j++)\{}
  node[\printusercolor] at (7, -2) {A[i][j] += ...};
\end{tikzpicture}
#+end_export


* Code: ~print_for~
#+begin_src C
  print_for(__isl_take isl_printer *p, //
            __isl_take isl_ast_print_options *options,//
            __isl_keep isl_ast_node *for_node, void *user) {
    isl_ast_expr *iter = isl_ast_node_for_get_iterator(for_node);
    isl_ast_expr *init = isl_ast_node_for_get_init(for_node);
    isl_ast_expr *cond = isl_ast_node_for_get_cond(for_node);
    isl_ast_expr *inc = isl_ast_node_for_get_inc(for_node);
    isl_ast_node *body = isl_ast_node_for_get_body(for_node);
    isl_id *annotation = isl_ast_node_get_annotation(for_node);
    if (id_name_is_label_and_free(annotation, TADASHI_LABEL_PARALLEL)) {
      p = isl_printer_print_str(p, "#pragma omp parallel for\n");
    }
    p = isl_printer_start_line(p);
    p = isl_printer_indent(p, 2);
    p = isl_printer_print_str(p, "for(");
    p = isl_printer_print_ast_expr(p, iter);
    // .. snip ..
  }

#+end_src


* Code: ~print_user~

#+begin_src C
    static __isl_give isl_printer *
    print_user(__isl_take isl_printer *p, //
               __isl_take isl_ast_print_options *options, //
               __isl_keep isl_ast_node *node, void *user) {
      isl_id_to_id *id2stmt = user;
      struct pet_stmt *stmt;
      isl_id_to_ast_expr *ref2expr;

      stmt = node_stmt(node, id2stmt);
      ref2expr = peek_ref2expr(node);

      p = pet_stmt_print_body(stmt, p, ref2expr);

      isl_ast_print_options_free(options);

      return p;
    }
#+end_src



